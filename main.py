import telebot
import sqlite3
import telebot_calendar
from time import sleep
from telebot import types


bot = telebot.TeleBot('BOT_TOKEN')  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞ 


calendar = telebot_calendar.Calendar(language=telebot_calendar.RUSSIAN_LANGUAGE)
calendar_1_callback = telebot_calendar.CallbackData("calendar_1", "action", "year", "month", "day")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
def create_year_change_markup(n):
    markup = types.InlineKeyboardMarkup()
    btns = []
    for i in range(2000 + n*12, 2013 + n*12):
        btns.append(types.InlineKeyboardButton(str(i), callback_data=f'year|{i}'))
    markup.add(btns[0], btns[1], btns[2], btns[3], btns[4], btns[5],
               btns[6], btns[7], btns[8], btns[9], btns[10], btns[11])
    markup.row(types.InlineKeyboardButton('<---', callback_data=f'change_year|{n-1}'),
               types.InlineKeyboardButton('--->', callback_data=f'change_year|{n+1}'))
    return markup


# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ –∏ —Å–∫–ª–∞–¥–∏–≤–∞–µ—Ç –≤—Å–µ –µ–≥–æ —Ü–∏—Ñ—Ä—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –ø–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—É–¥–µ—Ç < 23
def casting(num):
    if num <= 22:
        return num
    res = 0
    for i in str(num):
        res += int(i)
    return res if res <= 22 else casting(res)


# –§—É–Ω–∫–∏—è –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è "–º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã"
def matrix_calculation(dob):

    dob = dob.split('.')

    arcans = {}
    arcans['–ê'] = casting(int(dob[0]))
    arcans['–ë'] = casting(int(dob[1]))
    arcans['–í'] = casting(int(dob[2]))
    arcans['–ì'] = casting(arcans['–ê'] + arcans['–ë'] + arcans['–í'])
    arcans['–î'] = casting(arcans['–ê'] + arcans['–ë'] + arcans['–í'] + arcans['–ì'])
    arcans['–õ'] = casting(arcans['–í'] + arcans['–î'])
    arcans['–ü–†–ï–î–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï'] = casting(casting(arcans['–ë'] + arcans['–ì']) + casting(arcans['–ê'] + arcans['–í']))
    arcans['–ë2'] = casting(arcans['–ë'] + arcans['–î'])
    return arcans


# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –∏–∑ –Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
def matrix_decoding(arcans, sex):
    db = sqlite3.connect('data/num_info.sql')
    cur = db.cursor()

    out_messages = []
    for key, value in arcans.items():
        out_message = ''
        cur.execute(f'SELECT –∑–Ω–∞—á–µ–Ω–∏–µ FROM –ª–∞–π—Ç WHERE –ø–æ–∑–∏—Ü–∏—è = "{key}"')
        pos = cur.fetchone()
        cur.execute(f'SELECT "{value}" FROM –ª–∞–π—Ç WHERE –ø–æ–∑–∏—Ü–∏—è = "{key}"')
        res = cur.fetchone()
        if pos and res:
            if pos[0].find('|') == -1:
                out_message += pos[0]+'\n\n'+res[0]
            else:
                out_message += pos[0]+'\n\n'+res[0].split('|')[0 if sex == 'fem' else 1]
        if len(out_message) > 4095:
            out_messages.append(out_message[:4095])
            out_messages.append(out_message[4095:])
        elif len(out_message) > 0:
            out_messages.append(out_message)
    db.close()
    return out_messages


# –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –ø—Ä—è–º–æ –≤ –Ω–µ–º
def create_rating_markup(rate):
    markup = types.InlineKeyboardMarkup()
    btns = []
    for i in range(1, rate+1):
        btns.append(types.InlineKeyboardButton('‚ù§Ô∏è', callback_data=f'rate|rate {i}'))
    for i in range(rate+1, 6):
        btns.append(types.InlineKeyboardButton('üñ§', callback_data=f'rate|rate {i}'))
    markup.row(btns[0], btns[1], btns[2], btns[3], btns[4])
    if rate != 0:
        markup.row(types.InlineKeyboardButton('–û—Ü–µ–Ω–∏—Ç—å', callback_data=f'rate|coliform {rate}'))
    
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'))
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –≤–∞—à—É –ú–∞—Ç—Ä–∏—Ü—É –°—É–¥—å–±—ã. –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã - —ç—Ç–æ –º–µ—Ç–æ–¥\
—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞, –∫–∞–∫ –µ–≥–æ –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ª—é–¥–∏, –µ–≥–æ —Ç–∞–ª–∞–Ω—Ç—ã.\n\
–ù–∞–∂–º–∏—Ç–µ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', reply_markup=markup)


def select_name(message, sex, dob):
    if message.text == '–†–∞—Å—á–∏—Ç–∞—Ç—å' or message.text == '–û—Ü–µ–Ω–∏—Ç—å':
        menu(message)
    else:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', callback_data=f'enter_info|y {dob} {sex}'),
                   types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='enter_info|n'))
        bot.send_message(message.chat.id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {message.text}\n–ü–æ–ª: {"–º—É–∂—Å–∫–æ–π" if sex == "male" else "–∂–µ–Ω—Å–∫–∏–π"}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}', reply_markup=markup)


def add_comment(message, rate):
    db = sqlite3.connect('data/rating.sql')
    cur = db.cursor()
    cur.execute(f'SELECT rate FROM rating WHERE telegram_id={message.chat.id}')
    if cur.fetchone() is None:
        cur.execute('INSERT INTO rating VALUES (?, ?, ?)', (message.chat.id, rate, message.text))
    else:
        cur.execute(f'UPDATE rating SET rate="{rate}", comment="{message.text}" WHERE telegram_id={message.chat.id}')
    db.commit()
    bot.send_message(message.chat.id, '–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —á—Ç–æ –±—ã –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ü–µ–Ω–∏—Ç—å"')
    bot.send_message(5077725912, f'–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô {rate}/5\n{message.text}')
    cur.close()
    db.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith('sex'))
def change_sex(call):
    params = call.data.split('|')[1].split()
    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è.')
    bot.register_next_step_handler(msg, select_name, params[0], params[1])


@bot.callback_query_handler(func=lambda call: call.data.startswith('enter_info'))
def enter_info(call):
    params = call.data.split('|')[1].split()  # y/n, dob, sex
    if params[0] == 'y':
        arcans = matrix_calculation(params[1])
        out_messages = matrix_decoding(arcans, params[2])
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'), types.KeyboardButton('–û—Ü–µ–Ω–∏—Ç—å'))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
        for out_message in out_messages:
            bot.send_message(call.message.chat.id, str(out_message), parse_mode='HTML', reply_markup=markup)
            sleep(3)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è', reply_markup=create_year_change_markup(0))


# –ù–µ—Å–∫–æ–ª—å–∫–æ callback —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('change_year'))
def change_year(call):
    mod = call.data.split('|')[1]
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è', reply_markup=create_year_change_markup(int(mod)))


@bot.callback_query_handler(func=lambda call: call.data.startswith('year'))
def change_month(call):
    year = call.data.split('|')[1]
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('–Ø–Ω–≤–∞—Ä—å', callback_data=f'month|{year} 1'),
        types.InlineKeyboardButton('–§–µ–≤—Ä–∞–ª—å', callback_data=f'month|{year} 2'),
        types.InlineKeyboardButton('–ú–∞—Ä—Ç', callback_data=f'month|{year} 3'),
        types.InlineKeyboardButton('–ê–ø—Ä–µ–ª—å', callback_data=f'month|{year} 4'),
        types.InlineKeyboardButton('–ú–∞–π', callback_data=f'month|{year} 5'),
        types.InlineKeyboardButton('–ò—é–Ω—å', callback_data=f'month|{year} 6'),
        types.InlineKeyboardButton('–ò—é–ª—å', callback_data=f'month|{year} 7'),
        types.InlineKeyboardButton('–ê–≤–≥—É—Å—Ç', callback_data=f'month|{year} 8'),
        types.InlineKeyboardButton('–°–µ–Ω—Ç—è–±—Ä—å', callback_data=f'month|{year} 9'),
        types.InlineKeyboardButton('–û–∫—Ç—è–±—Ä—å', callback_data=f'month|{year} 10'),
        types.InlineKeyboardButton('–ù–æ—è–±—Ä—å', callback_data=f'month|{year} 11'),
        types.InlineKeyboardButton('–î–µ–∫–∞–±—Ä—å', callback_data=f'month|{year} 12')
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('month'))
def change_day(call):
    date = call.data.split('|')[1]
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è', reply_markup=calendar.create_calendar(
                                                                                        name=calendar_1_callback.prefix,
                                                                                        year=int(date.split()[0]),
                                                                                        month=int(date.split()[1])))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ —Å–∞–º–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@bot.callback_query_handler(
    func=lambda call: call.data.startswith(calendar_1_callback.prefix)
)
def calendar_f(call):

    # At this point, we are sure that this calendar is ours. So we cut the line by the separator of our calendar
    name, action, year, month, day = call.data.split(calendar_1_callback.sep)
    # Processing the calendar. Get either the date or None if the buttons are of a different type
    date = calendar.calendar_query_handler(
        bot=bot, call=call, name=name, action=action, year=year, month=month, day=day
    )
    # There are additional steps. Let's say if the date DAY is selected, you can execute your code. I sent a message.
    if action == "DAY":
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton('–î–µ–≤—É—à–∫–∞', callback_data=f'sex|fem {date.strftime("%d.%m.%Y")}'),
                   types.InlineKeyboardButton('–ú—É–∂—á–∏–Ω–∞', callback_data=f'sex|male {date.strftime("%d.%m.%Y")}'))
        bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª', reply_markup=markup)
    elif action == "CANCEL":
        bot.send_message(
            chat_id=call.from_user.id,
            text="Cancellation",
            reply_markup=types.ReplyKeyboardRemove(),
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith('rate'))
def rate(call):
    params = call.data.split('|')[1].split()
    if params[0] == 'rate':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5', reply_markup=create_rating_markup(int(params[1])))
    if params[0] == 'coliform':
        msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        bot.register_next_step_handler(msg, add_comment, params[1])


@bot.message_handler()
def menu(message):
    if message.text == '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è', reply_markup=create_year_change_markup(0))
    elif message.text == '–û—Ü–µ–Ω–∏—Ç—å':
        bot.send_message(message.chat.id, '–û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5', reply_markup=create_rating_markup(0))


bot.polling(none_stop=True)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
